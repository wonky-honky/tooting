name: Main

on:
  push:
    paths-ignore:
      - '.gitignore'
      - '*.md'
  workflow_call:
    inputs:
      subdirectory:
        required: false
        type: string
jobs:
#  lint:
#    name: 🧹 Lint / 📜 C++
#    runs-on: ubuntu-latest
#    steps:
#      - uses: actions/checkout@v3
#      - name: Run clang-format style check
#        uses: jidicula/clang-format-action@v4.9.0
#        with:
#          clang-format-version: '18'
#          exclude-regex: 'extern'

  build:
    defaults:
      run:
        working-directory: ./${{ inputs.subdirectory }}
    strategy:
      fail-fast: false
      matrix:
        build_type: ['Debug', 'Release']
        config:
#          - { name: '🍏 macOS Clang', os: macos-14 }
          - { name: '🐧 Linux Clang', os: ubuntu-latest }
          - { name: '🪟 Windows MSVC', os: windows-latest }

    name: 🛠 Build / ${{ matrix.config.name }} (${{ matrix.build_type }})
    runs-on: ${{ matrix.config.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: recursive
      - name: get cmake (NOT on mac)
        if: matrix.config.os != 'macos-14'
        uses: lukka/get-cmake@latest
#      - name: Install LLVM and Clang on mac
#        if: matrix.config.os == 'macos-14'
#        uses: KyleMayes/install-llvm-action@v2
#        with:
#          version: "17"
#          arch: "arm64"
#      - name: Install Dependencies (macOS)
#        if: matrix.config.os == 'macos-14'
#        run: brew install ccache ninja

      - name: Install lld + clang/llvm on ubuntu
        if: matrix.config.os == 'ubuntu-latest'
        uses: KyleMayes/install-llvm-action@v2
        with:
          version: "17"
          
      - name: Install Dependencies (Linux)
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y ccache ninja-build git libasound2-dev librtmidi-dev libsndfile1-dev zlib1g-dev libfmt-dev libsdl2-dev

      - name: Install Dependencies (Windows)
        if: matrix.config.os == 'windows-latest'
        run: |
          choco upgrade ccache ninja

      - name: Setup MSVC (Windows)
        if: matrix.config.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1

      - name: ccache
        uses: hendrikmuhs/ccache-action@v1.2
        if: matrix.config.os != 'macos-14'
        with:
          max-size: '10G'
          key: ${{ matrix.config.os }}-${{ matrix.build_type }}

      - name: Configure other OSes
        if: matrix.config.os != 'windows-latest'
        run: >
          mkdir tooting-build

          cmake
          -B tooting-build
          -G "Ninja"
          -DBUILD_GUI=OFF
          -DWITH_DEMOS=OFF
          -DWITH_INSTRUMENTS=OFF
          -DWITH_WAVETABLES=OFF
          -DTOOTING_WARNING_AS_ERROR=OFF
          -DSYSTEM_ZLIB=ON
          -DSYSTEM_RTMIDI=ON
          -DSYSTEM_FFTW=OFF
          -DSYSTEM_FMT=ON
          -DSYSTEM_LIBSNDFILE=ON
          -DSYSTEM_FREETYPE=OFF
          -DWITH_RENDER_OPENGL=OFF
          -DWITH_RENDER_OPENGL1=OFF
          -DWITH_RENDER_SDL=OFF
          -DWITH_RENDER_DX9=OFF
          -DWITH_RENDER_DX11=OFF
          -DUSE_GLES=OFF
          -DUSE_SDL2=ON
          -DSYSTEM_SDL2=ON
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/${{inputs.subdirectory}}/cmake/toolchain.cmake
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_INSTALL_PREFIX=install-${{ matrix.build_type }}
          .

      - name: Configure windows
        if: matrix.config.os == 'windows-latest'
        run: >
          mkdir tooting-build

          cmake
          -B tooting-build
          -G "Ninja"
          -DBUILD_GUI=OFF
          -DWITH_DEMOS=OFF
          -DWITH_INSTRUMENTS=OFF
          -DWITH_WAVETABLES=OFF
          -DTOOTING_WARNING_AS_ERROR=OFF
          -DSYSTEM_ZLIB=OFF
          -DSYSTEM_RTMIDI=OFF
          -DSYSTEM_FFTW=OFF
          -DSYSTEM_FMT=OFF
          -DSYSTEM_LIBSNDFILE=OFF
          -DSYSTEM_FREETYPE=OFF
          -DWITH_RENDER_OPENGL=OFF
          -DWITH_RENDER_OPENGL1=OFF
          -DWITH_RENDER_SDL=OFF
          -DWITH_RENDER_DX9=OFF
          -DWITH_RENDER_DX11=OFF
          -DUSE_GLES=OFF
          -DUSE_SDL2=ON
          -DTOOTING_WARNING_AS_ERROR=OFF
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -DCMAKE_INSTALL_PREFIX=install-${{ matrix.build_type }}
          .

      - name: Build
        run: cmake --build tooting-build

      - name: Install
        run: cmake --install tooting-build
      - name: Bundle dependencies
        if: matrix.config.os == 'ubuntu-latest'
        run: |
          wget https://github.com/linuxdeploy/linuxdeploy/releases/download/1-alpha-20240109-1/linuxdeploy-static-x86_64.AppImage
          chmod a+x ./linuxdeploy-static-x86_64.AppImage
          ./linuxdeploy-static-x86_64.AppImage --appdir install-${{ matrix.build_type }} --deploy-deps-only=./install-${{ matrix.build_type}}/tooting/lib/Linux-x86_64
      - name: Upload artifact (Debug)
        if: matrix.build_type == 'Debug'
        uses: actions/upload-artifact@v3
        with:
          name: tooting-Debug
          path: |
            ${{ github.workspace }}/${{ inputs.subdirectory }}/install-${{ matrix.build_type }}/*

      - name: Upload artifact (Release)
        if: matrix.build_type == 'Release'
        uses: actions/upload-artifact@v3
        with:
          name: tooting-Release
          path: |
            ${{ github.workspace }}/${{ inputs.subdirectory }}/install-${{ matrix.build_type }}/*
